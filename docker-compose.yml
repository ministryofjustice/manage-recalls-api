version: "3"
services:
  manage-recalls-api:
    build:
      context: .
    networks:
      - manage-recalls-api
    container_name: manage-recalls-api
    depends_on: [ postgres, fake-prisoner-offender-search-api, fake-prison-api, gotenberg, minio, redis ]
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ping" ]
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=dev
      - PRISONERSEARCH_ENDPOINT_URL=http://fake-prisoner-offender-search-api:8080
      - PRISONAPI_ENDPOINT_URL=http://fake-prison-api:8080
      - PRISONREGISTER_ENDPOINT_URL=http://fake-prison-register-api:8080
      - GOTENBERG_ENDPOINT_URL=http://gotenberg:3000
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DBNAME=manage_recalls
      - POSTGRES_USERNAME=ppud_user
      - POSTGRES_PASSWORD=secret
      - RETURNTOCUSTODY_UPDATETHRESHOLDMINUTES=5
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=secret

  postgres:
    image: postgres:13-alpine
    container_name: postgres_manage-recalls-api
    networks:
      - manage-recalls-api
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=ppud_user
      - POSTGRES_DB=manage_recalls

  fake-prisoner-offender-search-api:
    build: ./fake-prisoner-offender-search-api
    networks:
      - manage-recalls-api
    container_name: fake-prisoner-offender-search-api_manage-recalls-api
    ports:
      - "9092:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ping" ]
    command: --verbose

  fake-prison-api:
    build: ./fake-prison-api
    networks:
      - manage-recalls-api
    container_name: fake-prison-api_manage-recalls-api
    ports:
      - "9097:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ping" ]
    command: --verbose

  fake-prison-register-api:
    build: ./fake-prison-register-api
    networks:
      - manage-recalls-api
    container_name: fake-prison-register-api_manage-recalls-api
    ports:
      - "9094:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ping" ]
    command: --verbose --local-response-templating

  fake-court-register-api:
    build: ./fake-court-register-api
    networks:
      - manage-recalls-api
    container_name: fake-court-register-api_manage-recalls-api
    ports:
      - "9095:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ping" ]
    command: --verbose --local-response-templating

  gotenberg:
    image: gotenberg/gotenberg:7.5.0
    networks:
      - manage-recalls-api
    container_name: gotenberg_manage-recalls-api
    ports:
      - "9093:3000"
    environment:
      - LOG_LEVEL=DEBUG

  minio:
    image: minio/minio:RELEASE.2022-01-28T02-28-16Z
    container_name: minio_manage-recalls-api
    ports:
      - 4566:4566
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=ANYTHING_GOES
      - MINIO_ROOT_PASSWORD=ANYTHING_GOES
    networks:
      - manage-recalls-api
    entrypoint: sh
    command: -c 'mkdir -p /data/test-manage-recalls-api && /opt/bin/minio server /data --address ":4566" --console-address ":9001"'

  clamav:
    image: ghcr.io/ministryofjustice/hmpps-clamav-freshclammed
    networks:
      - manage-recalls-api
    container_name: clamav-manage-recalls-api
    ports:
      - "3310:3310"
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    image: bitnami/redis:6.2
    container_name: redis-manage-recalls-api
    networks:
      - manage-recalls-api
    environment:
      - REDIS_PASSWORD=secret
    ports:
      - 6379:6379

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-manage-recalls-api
    depends_on: [redis]
    networks:
      - manage-recalls-api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=secret
    ports:
      - 9999:8081

networks:
  manage-recalls-api:
